/*
 * C++ support functions (tested with GCC-4.8 and Clang-3.4)
 */
extern "C" {
#include "K60.h"
}

/**
 * Definition of a pure virtual function, calling this function is an error,
 * should probably include some debug breakpoint.
 */
extern "C" void __cxa_pure_virtual ()
{
    DEBUGGER_BREAK(BREAK_FAULT_HANDLER);
    while(1);
}

/**
 * This symbol is used by dynamic shared objects to identify them, but it is
 * somehow pulled in as a dependency by the compiler-generated global (static)
 * constructor code.
 */
void *__dso_handle = 0;

/**
 * Register a function to be called by exit or when a shared library
 * is unloaded. not really used on an embedded system where you pull the
 * power to shut down the program.
 *
 * This is only called by code automatically generated by the C++ compiler.
 *
 * Return value: 0 on success, non-zero on failure.
 */
extern "C" int
__cxa_atexit (void (*) (void *), void *, void *)
{
  /* We just pretend everything is dandy. */
  return 0;
}


/** \todo Implement operator new nothrow variant (C++11) */

#if 0
/* Base implementations of new and delete */
void* operator new (unsigned size)
{
    void *storage = malloc(size);
    if(storage == NULL) {
        throw "ENOMEM";
    }
}

void * operator new[] (unsigned size)
{
    // call your memory allocation routine
    return 0;
}

void operator delete (void*)
{
    // call your memory free routine
}

void operator delete[] (void*)
{
    // call your memory free routine
}
#endif /* 0 */
